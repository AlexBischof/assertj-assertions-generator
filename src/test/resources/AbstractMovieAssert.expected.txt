package org.assertj.assertions.generator.data;

import java.util.Date;


/**
 * Abstract base class for {@link Movie} specific assertions - Generated by CustomAssertionGenerator.
 */
public abstract class AbstractMovieAssert<S extends AbstractMovieAssert<S, A>, A extends Movie> extends AbstractArtWorkAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractMovieAssert}</code> to make assertions on actual Movie.
   * @param actual the Movie we want to make assertions on.
   */
  protected AbstractMovieAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual Movie's publicCategory is equal to the given one.
   * @param publicCategory the given publicCategory to compare the actual Movie's publicCategory to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Movie's publicCategory is not equal to the given one.
   */
  public S hasPublicCategory(Movie.PublicCategory publicCategory) {
    // check that actual Movie we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected publicCategory of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Movie.PublicCategory actualPublicCategory = actual.getPublicCategory();
    if (!org.assertj.core.util.Objects.areEqual(actualPublicCategory, publicCategory)) {
      failWithMessage(assertjErrorMessage, actual, publicCategory, actualPublicCategory);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Movie's releaseDate is equal to the given one.
   * @param releaseDate the given releaseDate to compare the actual Movie's releaseDate to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Movie's releaseDate is not equal to the given one.
   */
  public S hasReleaseDate(Date releaseDate) {
    // check that actual Movie we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected releaseDate of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Date actualReleaseDate = actual.getReleaseDate();
    if (!org.assertj.core.util.Objects.areEqual(actualReleaseDate, releaseDate)) {
      failWithMessage(assertjErrorMessage, actual, releaseDate, actualReleaseDate);
    }

    // return the current assertion for method chaining
    return myself;
  }

}

package org.assertj.assertions.generator.data;

import org.assertj.assertions.generator.data.lotr.Race;
import org.assertj.assertions.generator.data.lotr.RaceAssert;
import org.assertj.assertions.generator.data.lotr.Ring;
import org.assertj.assertions.generator.data.lotr.RingAssert;
import org.assertj.assertions.generator.data.lotr.TolkienCharacter;
import org.assertj.assertions.generator.data.lotr.TolkienCharacterAssert;

/**
 * Entry point for BDD assertion of different data types. Each method in this class is a static factory for the
 * type-specific assertion objects.
 */
public class BddAssertions {

  /**
   * Creates a new instance of <code>{@link ArtWorkAssert}</code>.
   *
   * @param actual the actual value.
   * @return the created assertion object.
   */
  public static ArtWorkAssert then(ArtWork actual) {
    return new ArtWorkAssert(actual);
  }

  /**
   * Creates a new instance of <code>{@link MovieAssert}</code>.
   *
   * @param actual the actual value.
   * @return the created assertion object.
   */
  public static MovieAssert then(Movie actual) {
    return new MovieAssert(actual);
  }

  /**
   * Creates a new instance of <code>{@link MoviePublicCategoryAssert}</code>.
   *
   * @param actual the actual value.
   * @return the created assertion object.
   */
  public static MoviePublicCategoryAssert then(Movie.PublicCategory actual) {
    return new MoviePublicCategoryAssert(actual);
  }

  /**
   * Creates a new instance of <code>{@link NameAssert}</code>.
   *
   * @param actual the actual value.
   * @return the created assertion object.
   */
  public static NameAssert then(Name actual) {
    return new NameAssert(actual);
  }

  /**
   * Creates a new instance of <code>{@link PlayerAssert}</code>.
   *
   * @param actual the actual value.
   * @return the created assertion object.
   */
  public static PlayerAssert then(Player actual) {
    return new PlayerAssert(actual);
  }

  /**
   * Creates a new instance of <code>{@link RaceAssert}</code>.
   *
   * @param actual the actual value.
   * @return the created assertion object.
   */
  public static RaceAssert then(Race actual) {
    return new RaceAssert(actual);
  }

  /**
   * Creates a new instance of <code>{@link RingAssert}</code>.
   *
   * @param actual the actual value.
   * @return the created assertion object.
   */
  public static RingAssert then(Ring actual) {
    return new RingAssert(actual);
  }

  /**
   * Creates a new instance of <code>{@link TolkienCharacterAssert}</code>.
   *
   * @param actual the actual value.
   * @return the created assertion object.
   */
  public static TolkienCharacterAssert then(TolkienCharacter actual) {
    return new TolkienCharacterAssert(actual);
  }

  /**
   * Creates a new instance of <code>{@link TreeEnumAssert}</code>.
   *
   * @param actual the actual value.
   * @return the created assertion object.
   */
  public static TreeEnumAssert then(TreeEnum actual) {
    return new TreeEnumAssert(actual);
  }

  /**
   * Creates a new <code>{@link BddAssertions}</code>.
   */
  protected BddAssertions() {
    // empty
  }
}

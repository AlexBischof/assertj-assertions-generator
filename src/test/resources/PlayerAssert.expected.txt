package org.fest.assertions.generator.data;

import static java.lang.String.format;

import org.fest.assertions.api.AbstractAssert;
import org.fest.assertions.api.Assertions;


/**
 * {@link Player} specific assertions - Generated by CustomAssertionGenerator.
 */
public class PlayerAssert extends AbstractAssert<PlayerAssert, Player> {

  /**
   * Creates a new </code>{@link PlayerAssert}</code> to make assertions on actual Player.
   * @param actual the Player we want to make assertions on.
   */
  public PlayerAssert(Player actual) {
    super(actual, PlayerAssert.class);
  }

  /**
   * An entry point for PlayerAssert to follow Fest standard <code>assertThat()</code> statements.<br>
   * With a static import, one's can write directly : <code>assertThat(myPlayer)</code> and get specific assertion with code completion.
   * @param actual the Player we want to make assertions on.
   * @return a new </code>{@link PlayerAssert}</code>
   */
  public static PlayerAssert assertThat(Player actual) {
    return new PlayerAssert(actual);
  }

  /**
   * Verifies that the actual Player's assistsPerGame is equal to the given one.
   * @param assistsPerGame the given assistsPerGame to compare the actual Player's assistsPerGame to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Player's assistsPerGame is not equal to the given one.
   */
  public PlayerAssert hasAssistsPerGame(int assistsPerGame) {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // we overrides the default error message with a more explicit one
    String errorMessage = format("Expected Player's assistsPerGame to be <%s> but was <%s>", assistsPerGame, actual.getAssistsPerGame());
    
    // check
    if (actual.getAssistsPerGame() != assistsPerGame) { throw new AssertionError(errorMessage); }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Player's name is equal to the given one.
   * @param name the given name to compare the actual Player's name to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Player's name is not equal to the given one.
   */
  public PlayerAssert hasName(Name name) {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // we overrides the default error message with a more explicit one
    String errorMessage = format("Expected Player's name to be <%s> but was <%s>", name, actual.getName());
    
    // check
    if (!actual.getName().equals(name)) { throw new AssertionError(errorMessage); }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Player's pointsPerGame is equal to the given one.
   * @param pointsPerGame the given pointsPerGame to compare the actual Player's pointsPerGame to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Player's pointsPerGame is not equal to the given one.
   */
  public PlayerAssert hasPointsPerGame(int pointsPerGame) {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // we overrides the default error message with a more explicit one
    String errorMessage = format("Expected Player's pointsPerGame to be <%s> but was <%s>", pointsPerGame, actual.getPointsPerGame());
    
    // check
    if (actual.getPointsPerGame() != pointsPerGame) { throw new AssertionError(errorMessage); }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Player's previousTeams contains the given String elements.
   * @param previousTeams the given elements that should be contained in actual Player's previousTeams.
   * @return this assertion object.
   * @throws AssertionError if the actual Player's previousTeams does not contain all given String elements.
   */
  public PlayerAssert hasPreviousTeams(String... previousTeams) {  
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (previousTeams == null) throw new AssertionError("Expecting previousTeams parameter not to be null.");
    
    // check with standard error message (see commented below to set your own message).
    Assertions.assertThat(actual.getPreviousTeams()).contains(previousTeams);

    // uncomment the 4 lines below if you want to build your own error message :
    // WritableAssertionInfo assertionInfo = new WritableAssertionInfo();
    // String errorMessage = "my error message";
    // assertionInfo.overridingErrorMessage(errorMessage);
    // Iterables.instance().assertContains(assertionInfo, actual.getTeamMates(), teamMates);
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Player has no previousTeams.
   * @return this assertion object.
   * @throws AssertionError if the actual Player's previousTeams is not empty.
   */
  public PlayerAssert hasNoPreviousTeams() {  
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // we overrides the default error message with a more explicit one
    String errorMessage = format("Expected actual <%s> not to have previousTeams but had :\\n%s", actual, actual.getPreviousTeams());
    
    // check
    if (actual.getPreviousTeams().length > 0) throw new AssertionError(errorMessage);
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual Player's reboundsPerGame is equal to the given one.
   * @param reboundsPerGame the given reboundsPerGame to compare the actual Player's reboundsPerGame to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Player's reboundsPerGame is not equal to the given one.
   */
  public PlayerAssert hasReboundsPerGame(int reboundsPerGame) {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // we overrides the default error message with a more explicit one
    String errorMessage = format("Expected Player's reboundsPerGame to be <%s> but was <%s>", reboundsPerGame, actual.getReboundsPerGame());
    
    // check
    if (actual.getReboundsPerGame() != reboundsPerGame) { throw new AssertionError(errorMessage); }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Player is rookie.
   * @return this assertion object.
   * @throws AssertionError - if the actual Player is not rookie.
   */
  public PlayerAssert isRookie() {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // we overrides the default error message with a more explicit one
    String errorMessage = format("Expected actual Player to be rookie but was not.", actual);
    
    // check
    if (!actual.isRookie()) throw new AssertionError(errorMessage);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Player is not rookie.
   * @return this assertion object.
   * @throws AssertionError - if the actual Player is rookie.
   */
  public PlayerAssert isNotRookie() {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // we overrides the default error message with a more explicit one
    String errorMessage = format("Expected actual Player not to be rookie but was.", actual);
    
    // check
    if (actual.isRookie()) throw new AssertionError(errorMessage);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Player's team is equal to the given one.
   * @param team the given team to compare the actual Player's team to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Player's team is not equal to the given one.
   */
  public PlayerAssert hasTeam(String team) {
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // we overrides the default error message with a more explicit one
    String errorMessage = format("Expected Player's team to be <%s> but was <%s>", team, actual.getTeam());
    
    // check
    if (!actual.getTeam().equals(team)) { throw new AssertionError(errorMessage); }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Player's teamMates contains the given Player elements.
   * @param teamMates the given elements that should be contained in actual Player's teamMates.
   * @return this assertion object.
   * @throws AssertionError if the actual Player's teamMates does not contain all given Player elements.
   */
  public PlayerAssert hasTeamMates(Player... teamMates) {  
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // check that given Player varargs is not null.
    if (teamMates == null) throw new AssertionError("Expecting teamMates parameter not to be null.");
    
    // check with standard error message (see commented below to set your own message).
    Assertions.assertThat(actual.getTeamMates()).contains(teamMates);

    // uncomment the 4 lines below if you want to build your own error message :
    // WritableAssertionInfo assertionInfo = new WritableAssertionInfo();
    // String errorMessage = "my error message";
    // assertionInfo.overridingErrorMessage(errorMessage);
    // Iterables.instance().assertContains(assertionInfo, actual.getTeamMates(), teamMates);
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Player has no teamMates.
   * @return this assertion object.
   * @throws AssertionError if the actual Player's teamMates is not empty.
   */
  public PlayerAssert hasNoTeamMates() {  
    // check that actual Player we want to make assertions on is not null.
    isNotNull();

    // we overrides the default error message with a more explicit one
    String errorMessage = format("Expected actual <%s> not to have teamMates but had :\\n%s", actual, actual.getTeamMates());
    
    // check
    if (!actual.getTeamMates().isEmpty()) throw new AssertionError(errorMessage);
    
    // return the current assertion for method chaining
    return this;
  }
  

}